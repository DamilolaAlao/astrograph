// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	context "context"
	strconv "strconv"

	model "github.com/mobius-network/astrograph/model"
	graphql "github.com/vektah/gqlgen/graphql"
	introspection "github.com/vektah/gqlgen/neelance/introspection"
	query "github.com/vektah/gqlgen/neelance/query"
	schema "github.com/vektah/gqlgen/neelance/schema"
)

func MakeExecutableSchema(resolvers Resolvers) graphql.ExecutableSchema {
	return &executableSchema{resolvers: resolvers}
}

type Resolvers interface {
	Account_trustlines(ctx context.Context, obj *model.Account) ([]model.TrustLine, error)
	Account_data(ctx context.Context, obj *model.Account) ([]model.DataEntry, error)
	Account_signers(ctx context.Context, obj *model.Account) ([]model.Signer, error)

	Query_Account(ctx context.Context, id string) (*model.Account, error)
	Query_Accounts(ctx context.Context, id []string) ([]model.Account, error)

	Subscription_accountUpdated(ctx context.Context, id string) (<-chan model.Account, error)
}

type executableSchema struct {
	resolvers Resolvers
}

func (e *executableSchema) Schema() *schema.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *query.Operation) *graphql.Response {
	return graphql.ErrorResponse(ctx, "mutations are not supported")
}

func (e *executableSchema) Subscription(ctx context.Context, op *query.Operation) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	next := ec._Subscription(ctx, op.Selections)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		return &graphql.Response{
			Data:   buf,
			Errors: ec.Errors,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext

	resolvers Resolvers
}

var accountImplementors = []string{"Account"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Account(ctx context.Context, sel []query.Selection, obj *model.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, accountImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "id":
			out.Values[i] = ec._Account_id(ctx, field, obj)
		case "balance":
			out.Values[i] = ec._Account_balance(ctx, field, obj)
		case "sequenceNumber":
			out.Values[i] = ec._Account_sequenceNumber(ctx, field, obj)
		case "numSubentries":
			out.Values[i] = ec._Account_numSubentries(ctx, field, obj)
		case "inflationDest":
			out.Values[i] = ec._Account_inflationDest(ctx, field, obj)
		case "homeDomain":
			out.Values[i] = ec._Account_homeDomain(ctx, field, obj)
		case "thresholds":
			out.Values[i] = ec._Account_thresholds(ctx, field, obj)
		case "flags":
			out.Values[i] = ec._Account_flags(ctx, field, obj)
		case "lastModified":
			out.Values[i] = ec._Account_lastModified(ctx, field, obj)
		case "trustlines":
			out.Values[i] = ec._Account_trustlines(ctx, field, obj)
		case "data":
			out.Values[i] = ec._Account_data(ctx, field, obj)
		case "signers":
			out.Values[i] = ec._Account_signers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Account_id(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Account"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Account_balance(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Account"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Balance
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Account_sequenceNumber(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Account"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SequenceNumber
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Account_numSubentries(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Account"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.NumSubentries
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Account_inflationDest(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Account"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.InflationDest
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Account_homeDomain(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Account"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.HomeDomain
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Account_thresholds(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Account"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Thresholds
	return ec._AccountThresholds(ctx, field.Selections, &res)
}

func (ec *executionContext) _Account_flags(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Account"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Flags
	return ec._AccountFlags(ctx, field.Selections, &res)
}

func (ec *executionContext) _Account_lastModified(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Account"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.LastModified
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Account_trustlines(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Account",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Account_trustlines(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.TrustLine)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Trustline(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Account_data(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Account",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Account_data(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.DataEntry)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._DataEntry(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Account_signers(ctx context.Context, field graphql.CollectedField, obj *model.Account) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Account",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Account_signers(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.Signer)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Signer(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

var accountFlagsImplementors = []string{"AccountFlags"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AccountFlags(ctx context.Context, sel []query.Selection, obj *model.AccountFlags) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, accountFlagsImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountFlags")
		case "id":
			out.Values[i] = ec._AccountFlags_id(ctx, field, obj)
		case "authRequired":
			out.Values[i] = ec._AccountFlags_authRequired(ctx, field, obj)
		case "authRevokable":
			out.Values[i] = ec._AccountFlags_authRevokable(ctx, field, obj)
		case "authImmutable":
			out.Values[i] = ec._AccountFlags_authImmutable(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _AccountFlags_id(ctx context.Context, field graphql.CollectedField, obj *model.AccountFlags) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountFlags"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _AccountFlags_authRequired(ctx context.Context, field graphql.CollectedField, obj *model.AccountFlags) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountFlags"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AuthRequired
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _AccountFlags_authRevokable(ctx context.Context, field graphql.CollectedField, obj *model.AccountFlags) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountFlags"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AuthRevokable
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _AccountFlags_authImmutable(ctx context.Context, field graphql.CollectedField, obj *model.AccountFlags) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountFlags"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AuthImmutable
	return graphql.MarshalBoolean(res)
}

var accountThresholdsImplementors = []string{"AccountThresholds"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AccountThresholds(ctx context.Context, sel []query.Selection, obj *model.AccountThresholds) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, accountThresholdsImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountThresholds")
		case "id":
			out.Values[i] = ec._AccountThresholds_id(ctx, field, obj)
		case "masterWeight":
			out.Values[i] = ec._AccountThresholds_masterWeight(ctx, field, obj)
		case "low":
			out.Values[i] = ec._AccountThresholds_low(ctx, field, obj)
		case "medium":
			out.Values[i] = ec._AccountThresholds_medium(ctx, field, obj)
		case "high":
			out.Values[i] = ec._AccountThresholds_high(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _AccountThresholds_id(ctx context.Context, field graphql.CollectedField, obj *model.AccountThresholds) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountThresholds"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _AccountThresholds_masterWeight(ctx context.Context, field graphql.CollectedField, obj *model.AccountThresholds) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountThresholds"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MasterWeight
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _AccountThresholds_low(ctx context.Context, field graphql.CollectedField, obj *model.AccountThresholds) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountThresholds"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Low
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _AccountThresholds_medium(ctx context.Context, field graphql.CollectedField, obj *model.AccountThresholds) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountThresholds"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Medium
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _AccountThresholds_high(ctx context.Context, field graphql.CollectedField, obj *model.AccountThresholds) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountThresholds"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.High
	return graphql.MarshalInt(res)
}

var assetImplementors = []string{"Asset"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Asset(ctx context.Context, sel []query.Selection, obj *model.Asset) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, assetImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Asset")
		case "id":
			out.Values[i] = ec._Asset_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Asset_type(ctx, field, obj)
		case "issuer":
			out.Values[i] = ec._Asset_issuer(ctx, field, obj)
		case "code":
			out.Values[i] = ec._Asset_code(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Asset_id(ctx context.Context, field graphql.CollectedField, obj *model.Asset) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Asset"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Asset_type(ctx context.Context, field graphql.CollectedField, obj *model.Asset) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Asset"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return res
}

func (ec *executionContext) _Asset_issuer(ctx context.Context, field graphql.CollectedField, obj *model.Asset) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Asset"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Issuer
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Asset_code(ctx context.Context, field graphql.CollectedField, obj *model.Asset) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Asset"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Code
	return graphql.MarshalString(res)
}

var dataEntryImplementors = []string{"DataEntry"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _DataEntry(ctx context.Context, sel []query.Selection, obj *model.DataEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, dataEntryImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataEntry")
		case "id":
			out.Values[i] = ec._DataEntry_id(ctx, field, obj)
		case "accountId":
			out.Values[i] = ec._DataEntry_accountId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DataEntry_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataEntry_value(ctx, field, obj)
		case "lastModified":
			out.Values[i] = ec._DataEntry_lastModified(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _DataEntry_id(ctx context.Context, field graphql.CollectedField, obj *model.DataEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DataEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _DataEntry_accountId(ctx context.Context, field graphql.CollectedField, obj *model.DataEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DataEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AccountID
	return graphql.MarshalString(res)
}

func (ec *executionContext) _DataEntry_name(ctx context.Context, field graphql.CollectedField, obj *model.DataEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DataEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _DataEntry_value(ctx context.Context, field graphql.CollectedField, obj *model.DataEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DataEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Value
	return graphql.MarshalString(res)
}

func (ec *executionContext) _DataEntry_lastModified(ctx context.Context, field graphql.CollectedField, obj *model.DataEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DataEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.LastModified
	return graphql.MarshalInt(res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, queryImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "Account":
			out.Values[i] = ec._Query_Account(ctx, field)
		case "Accounts":
			out.Values[i] = ec._Query_Accounts(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_Account(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_Account(ctx, args["id"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Account)
		if res == nil {
			return graphql.Null
		}
		return ec._Account(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_Accounts(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			}
		}
		arg0 = make([]string, len(rawIf1))
		for idx1 := range rawIf1 {
			arg0[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_Accounts(ctx, args["id"].([]string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.Account)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Account(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectSchema()
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectType(args["name"].(string))
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

var signerImplementors = []string{"Signer"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Signer(ctx context.Context, sel []query.Selection, obj *model.Signer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, signerImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Signer")
		case "id":
			out.Values[i] = ec._Signer_id(ctx, field, obj)
		case "accountId":
			out.Values[i] = ec._Signer_accountId(ctx, field, obj)
		case "signer":
			out.Values[i] = ec._Signer_signer(ctx, field, obj)
		case "weight":
			out.Values[i] = ec._Signer_weight(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Signer_id(ctx context.Context, field graphql.CollectedField, obj *model.Signer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Signer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Signer_accountId(ctx context.Context, field graphql.CollectedField, obj *model.Signer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Signer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AccountID
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Signer_signer(ctx context.Context, field graphql.CollectedField, obj *model.Signer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Signer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Signer
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Signer_weight(ctx context.Context, field graphql.CollectedField, obj *model.Signer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Signer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Weight
	return graphql.MarshalInt(res)
}

var subscriptionImplementors = []string{"Subscription"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Subscription(ctx context.Context, sel []query.Selection) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, subscriptionImplementors, ec.Variables)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "accountUpdated":
		return ec._Subscription_accountUpdated(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

func (ec *executionContext) _Subscription_accountUpdated(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return nil
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{Field: field})
	results, err := ec.resolvers.Subscription_accountUpdated(ctx, args["id"].(string))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler { return ec._Account(ctx, field.Selections, &res) }())
		return &out
	}
}

var trustlineImplementors = []string{"Trustline"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Trustline(ctx context.Context, sel []query.Selection, obj *model.TrustLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, trustlineImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Trustline")
		case "id":
			out.Values[i] = ec._Trustline_id(ctx, field, obj)
		case "accountId":
			out.Values[i] = ec._Trustline_accountId(ctx, field, obj)
		case "asset":
			out.Values[i] = ec._Trustline_asset(ctx, field, obj)
		case "limit":
			out.Values[i] = ec._Trustline_limit(ctx, field, obj)
		case "balance":
			out.Values[i] = ec._Trustline_balance(ctx, field, obj)
		case "flags":
			out.Values[i] = ec._Trustline_flags(ctx, field, obj)
		case "lastModified":
			out.Values[i] = ec._Trustline_lastModified(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Trustline_id(ctx context.Context, field graphql.CollectedField, obj *model.TrustLine) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Trustline"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Trustline_accountId(ctx context.Context, field graphql.CollectedField, obj *model.TrustLine) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Trustline"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AccountID
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Trustline_asset(ctx context.Context, field graphql.CollectedField, obj *model.TrustLine) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Trustline"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Asset
	return ec._Asset(ctx, field.Selections, &res)
}

func (ec *executionContext) _Trustline_limit(ctx context.Context, field graphql.CollectedField, obj *model.TrustLine) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Trustline"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Limit
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Trustline_balance(ctx context.Context, field graphql.CollectedField, obj *model.TrustLine) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Trustline"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Balance
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Trustline_flags(ctx context.Context, field graphql.CollectedField, obj *model.TrustLine) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Trustline"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Flags
	return ec._TrustlineFlags(ctx, field.Selections, &res)
}

func (ec *executionContext) _Trustline_lastModified(ctx context.Context, field graphql.CollectedField, obj *model.TrustLine) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Trustline"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.LastModified
	return graphql.MarshalInt(res)
}

var trustlineFlagsImplementors = []string{"TrustlineFlags"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _TrustlineFlags(ctx context.Context, sel []query.Selection, obj *model.TrustLineFlags) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, trustlineFlagsImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustlineFlags")
		case "ID":
			out.Values[i] = ec._TrustlineFlags_ID(ctx, field, obj)
		case "authorized":
			out.Values[i] = ec._TrustlineFlags_authorized(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _TrustlineFlags_ID(ctx context.Context, field graphql.CollectedField, obj *model.TrustLineFlags) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TrustlineFlags"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _TrustlineFlags_authorized(ctx context.Context, field graphql.CollectedField, obj *model.TrustLineFlags) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TrustlineFlags"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Authorized
	return graphql.MarshalBoolean(res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel []query.Selection, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __DirectiveImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Locations()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel []query.Selection, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __EnumValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel []query.Selection, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __FieldImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel []query.Selection, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __InputValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DefaultValue()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel []query.Selection, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __SchemaImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Types()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.QueryType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MutationType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SubscriptionType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Directives()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Directive(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel []query.Selection, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __TypeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Kind()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Fields(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Field(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Interfaces()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PossibleTypes()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EnumValues(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___EnumValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.InputFields()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OfType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	t := parsedSchema.Resolve(name)
	if t == nil {
		return nil
	}
	return introspection.WrapType(t)
}

var parsedSchema = schema.MustParse(`scalar AccountID
scalar AssetCode

enum AssetType {
  NATIVE
  ALPHANUM_4
  ALPHANUM_12
}

type Asset {
  id: ID!
  type: AssetType!
  issuer: AccountID
  code: AssetCode
}

type AccountFlags {
  id: ID!
  authRequired: Boolean!
  authRevokable: Boolean!
  authImmutable: Boolean!
}

type AccountThresholds {
  id: ID!
  masterWeight: Int!
  low: Int!
  medium: Int!
  high: Int!
}

type DataEntry {
  id: ID!
  accountId: AccountID!
  name: String!
  value: String!
  lastModified: Int!
}

type Signer {
  id: ID!
  accountId: AccountID!
  signer: AccountID!
  weight: Int!
}

type Account {
  id: AccountID!
  balance: Float!
  sequenceNumber: Int!
  numSubentries: Int!
  inflationDest: AccountID
  homeDomain: String
  thresholds: AccountThresholds!
  flags: AccountFlags!
  lastModified: Int!
  trustlines: [Trustline!]!
  data: [DataEntry!]
  signers: [Signer!]
}

type TrustlineFlags {
  ID: ID!
  authorized: Boolean!
}

type Trustline {
  id: ID!
  accountId: AccountID!
  asset: Asset!
  limit: Float!
  balance: Float!
  flags: TrustlineFlags
  lastModified: Int!
}

type Subscription {
  accountUpdated(id: AccountID!): Account!
}

type Query {
  Account(id: AccountID!): Account
  Accounts(id: [AccountID!]): [Account]
}
`)
